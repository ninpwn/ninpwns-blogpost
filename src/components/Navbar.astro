---
import { Icon } from 'astro-icon/components'
import DisplaySettings from './widget/DisplaySettings.svelte'
import { LinkPreset, type NavBarLink } from '../types/config'
import { navBarConfig, siteConfig } from '../config'
import NavMenuPanel from './widget/NavMenuPanel.astro'
import Search from './Search.svelte'
import { LinkPresets } from '../constants/link-presets'
import LightDarkSwitch from './LightDarkSwitch.svelte'
import { url } from '../utils/url-utils'
const className = Astro.props.class

let links: NavBarLink[] = navBarConfig.links.map(
  (item: NavBarLink | LinkPreset): NavBarLink => {
    if (typeof item === 'number') {
      return LinkPresets[item]
    }
    return item
  },
)
---
<div class="card-base overflow-visible max-w-[var(--page-width)] h-[4.5rem] rounded-t-none mx-auto flex items-center justify-between px-4">
  <div class="flex items-center">
    <a href={url('/')} class="btn-plain scale-animation rounded-lg h-[3.25rem] px-5 font-bold active:scale-95">
      <div class="flex flex-row text-[var(--primary)] items-center text-md">
        <Icon name="material-symbols:home-outline-rounded" class="text-[1.75rem] mb-1 mr-2" />
        {siteConfig.title}
      </div>
    </a>
    <div class="hidden md:flex ml-4">
      {links.map((l) => (
        <a
          aria-label={l.name}
          href={l.external ? l.url : url(l.url)}
          target={l.external ? "_blank" : null}
          class="btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95"
        >
          <div class="flex items-center">
            {l.name}
            {l.external && (
              <Icon
                name="fa6-solid:arrow-up-right-from-square"
                class="text-[0.875rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"
              />
            )}
          </div>
        </a>
      ))}
    </div>
  </div>
  <div class="flex">
    {/* Right aligned icons: Search, Theme switch, Menu button, etc. */}
  </div>
</div>


<style lang="stylus">
</style>

<script>

function switchTheme() {
    if (localStorage.theme === 'dark') {
        document.documentElement.classList.remove('dark');
        localStorage.theme = 'light';
    } else {
        document.documentElement.classList.add('dark');
        localStorage.theme = 'dark';
    }
}

function loadButtonScript() {
    let switchBtn = document.getElementById("scheme-switch");
    if (switchBtn) {
        switchBtn.addEventListener("click", function () {
            switchTheme()
        });
    }

    let settingBtn = document.getElementById("display-settings-switch");
    if (settingBtn) {
        settingBtn.addEventListener("click", function () {
            let settingPanel = document.getElementById("display-setting");
            if (settingPanel) {
                settingPanel.classList.toggle("float-panel-closed");
            }
        });
    }

    let menuBtn = document.getElementById("nav-menu-switch");
    if (menuBtn) {
        menuBtn.addEventListener("click", function () {
            let menuPanel = document.getElementById("nav-menu-panel");
            if (menuPanel) {
                menuPanel.classList.toggle("float-panel-closed");
            }
        });
    }
}

loadButtonScript();

document.addEventListener('astro:after-swap', () => {
    loadButtonScript();
}, { once: false });
</script>

{import.meta.env.PROD && <script is:inline define:vars={{scriptUrl: url('/pagefind/pagefind.js')}}>
async function loadPagefind() {
    const pagefind = await import(scriptUrl)
    await pagefind.options({
        'excerptLength': 20
    })
    pagefind.init()
    window.pagefind = pagefind
    pagefind.search('')     // speed up the first search
}
loadPagefind()
</script>}
